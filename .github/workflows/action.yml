on:
  #push:
  pull_request_target:
    types: 
      - closed
    branches:
      - main
    paths:
      - "**.version"

jobs:

  CheckVersion:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true   
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check Semantic version and proper increment 
        id: checkVersion
        run: |
          echo "::set-output name=versionBase::$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.sha }} **.version | grep "\-v") "
          echo "::set-output name=versionHead::$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.sha }} **.version | grep "\+v") "
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'  
      - name: check Semantic
        id: semanticCheck
        run: |
          pip install semantic_version
          OUT=`python ./.github/workflows/version.py ${{steps.checkVersion.outputs.versionHead}} ${{steps.checkVersion.outputs.versionBase}}`
          echo $OUT          
          echo "::set-output name=valid::$OUT"
  
  CreateRelease:
    runs-on: ubuntu-latest
    needs: CheckVersion
    if: github.event.pull_request.merged == true && ${{needs.CheckVersion.semanticCheck.outputs.valid}} == 'True'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get Version
        id: get_version
        run: |
          echo "::set-output name=version::$(cat product.version)"
      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.get_version.outputs.version}}
          release_name: Release ${{steps.get_version.outputs.version}}
          draft: true
          prerelease: false
      - name: Create artifact files
        run: |
          mkdir info
          echo "${{ steps.create_release.outputs.id }}" > info/release_id
          echo "${{ steps.create_release.outputs.upload_url }}" > info/upload_url
      - uses: actions/upload-artifact@v1
        with:
          name: info
          path: info
          
      - name: Publish Release    
        uses: actions/download-artifact@v1
        with:
          name: info
      - name: Set publish_info
        id: publish_info
        run: |
          release_id=$(cat info/release_id)
          echo "::set-output name=release_id::$release_id"
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.publish_info.outputs.release_id }}  
